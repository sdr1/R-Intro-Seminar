my_skim(mtcars)
mad
?mad
my_skim <- skim_with(numeric = sfl(p90 = quantile(0.99)))
my_skim(mtcars)
my_skim <- skim_with(numeric = sfl(p90 = quantile(, 0.99, na.rm = T)))
my_skim(mtcars)
my_skim <- skim_with(numeric = sfl(p90 = quantile(0.99, na.rm = T)))
my_skim(mtcars)
library(skimr)
mtcars %>%
select(mpg, cyl, disp) %>%
skimr::skim()
mtcars %>%
# Find the mean, st. dev., min, and max for each variable
summarise_each(funs(mean, sd, min, quantile(0.99), max))
mtcars %>%
# Find the mean, st. dev., min, and max for each variable
summarize_all(funs(mean, sd, min, quantile(0.99), max))
mtcars %>%
# Find the mean, st. dev., min, and max for each variable
summarize_all(funs(mean, sd, min,  max))
starwars %>% summarise_if(is.numeric, mean, na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, mean, sd, na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(mean, sd), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, quantile(50)), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, stats::quantile(.,50)), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, stats::quantile(.,0.50)), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, stats::quantile(.,0.50)), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min, mean, stats::quantile(,0.50)), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min, mean, quantile(x, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75)), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, quantile(., c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75)), na.rm = TRUE) %>%
# Move summary stats to columns
gather(key, value, everything()) %>%
separate(key, into = c("variable", "stat"), sep = "_") %>%
spread(stat, value)
mtcars %>%
summarise_if(is.numeric, list(min, mean, quantile(c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75)), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min, mean, quantile(x = ., c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75)), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(.), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(...), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(..), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(,), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(.,), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(.,na.rm = T), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(~.,), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(min(~.,na.rm= T), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(quantile(~.,probs = c(0.5)), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(quantile(~.,0.5), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(quantile(~.,0.5, na.rm = T), mean), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(quantile(~.,0.5)), na.rm = TRUE)
mtcars %>%
summarise_if(is.numeric, list(quantile))
mtcars %>%
summarise_if(is.numeric, list(quantile(,0.5)))
mtcars %>%
summarise_all(list(min = min, max = max))
mtcars %>%
summarise_if(is.numeric, list(min, median, max))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max,
p75 = quantile(0.75)))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max,
p75 = quantile(,0.75)))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max,
p75 = quantile(~.,0.75)))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max,
p75 = quantile(~.,0.75, na.rm = T)))
mtcars %>%
summarise_if(is.numeric, list(min = min, median = median, max = max,
p75 = stats::quantile(~.,0.75, na.rm = T)))
psych::describe(mtcars)
psych::describe(mtcars, quant = c(0.25, 0.75, 0.90))
psych::describe(mtcars, quant = c(0.25, 0.75, 0.90)) %>%
tibble() %>%
select(n, min, Q0.25, median, mean, Q0.75, max, se)
psych::describe(mtcars, quant = c(0.25, 0.75, 0.90)) %>%
tibble() %>%
select(n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
mtcars %>%
mutate(
model = row.names()
)
mtcars %>%
mutate(
model = row.name()
)
mtcars %>%
mutate(
model = row.name
)
row.names(mtcars)
mtcars <- mtcars %>%
add_rownames()
mtcars <- mtcars %>%
tibble::rownames_to_column()
mtcars
mtcars %<>% select(-rowname)
library(magrittr)
mtcars %<>% select(-rowname)
mtcars
base::mtcars
mtcars
psych::describe(storms, quant = c(0.25, 0.75, 0.90)) %>%
tibble() %>%
mutate() %>%
select(n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
storms
psych::describe(storms, quant = c(0.25, 0.75, 0.90)) %>%
tibble() %>%
mutate() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
psych::describe(storms, quant = c(0.25, 0.75, 0.90)) %>%
tibble() %>%
mutate() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se)
storms
psych::describe(storms, quant = c(0.25, 0.75, 0.90))
storms
psych::describe(storms, quant = c(0.25, 0.75, 0.90), check=TRUE)
storms %>%
filter(is_numeric())
storms %>%
select_if(is.numeric)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble() %>%
mutate() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble() %>%
tibble::rownames_to_column()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% row.names()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
mutate(Variable = row.names())
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
mutate(Variable = row.names)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
add_rownames()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble::rowid_to_column()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble::rownames_to_column()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
mutate(
tibble::rownames_to_column())
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
rownames_to_column(var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble() %>%
rownames_to_column(var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
tibble() %>%
rownames_to_column(var = "Variable") %>% View()
storms %>%
select_if(is.numeric)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE)
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% has_rownames()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
rownames_to_column(., var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
rownames_to_column(~., var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
rownames_to_column(var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% class()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% tibble() %>% class()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% tibble()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>% data.frame()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
dplyr::data.frame()
dplyr::data_frame()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame()
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "Variable")
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 2))
storms %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 1))
library(skimr)
storms %>%
select_if(is.numeric) %>%
skimr::skim()
NHIS %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 1))
NHIS <- haven::read_dta("Data/NHIS2009_clean.dta")
NHIS %>%
select_if(is.numeric) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 1))
names(NHIS)
NHIS %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.25, 0.75, 0.90), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, min, Q0.25, median, mean, Q0.75, max, se) %>%
mutate(across(where(is.numeric), round, 1))
NHIS %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.95), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, median, mean, sd, Q0.95) %>%
mutate(across(where(is.numeric), round, 1))
NHIS %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.95), check=TRUE)
NHIS %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.90), check=TRUE)
NHIS %>%
tibble() %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.90), check=TRUE)
NHIS %>%
tibble() %>%
select(hlth, educ)
NHIS %>%
tibble() %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.75, 0.90), check=TRUE)
NHIS %>%
tibble() %>%
select(hlth, educ) %>%
psych::describe(quant = c(0.75, 0.95), check=TRUE) %>%
data.frame() %>%
rownames_to_column(var = "name") %>%
tibble() %>%
select(name, n, median, mean, sd, Q0.95) %>%
mutate(across(where(is.numeric), round, 1))
library(skimr)
storms %>%
skimr::skim() %>%
kable_styling(
bootstrap_options = "striped", # several design options
full_width = FALSE, # defaults to TRUE
position = "center", # where is it positioned?
fixed_thead = TRUE # whether header is fixed when scrolling through -- only for longer tables
) %>%
column_spec(1, bold = TRUE, border_right = TRUE) %>% # column specifications can be easily modified
library(skimr)
storms %>%
skimr::skim() %>%
kable_styling(
bootstrap_options = "striped", # several design options
full_width = FALSE, # defaults to TRUE
position = "center", # where is it positioned?
fixed_thead = TRUE # whether header is fixed when scrolling through -- only for longer tables
) %>%
column_spec(1, bold = TRUE, border_right = TRUE) # column specifications can be easily modified
library(skimr)
storms %>%
skimr::skim() %>%
kable_styling(
bootstrap_options = "striped", # several design options
full_width = FALSE, # defaults to TRUE
position = "center", # where is it positioned?
fixed_thead = TRUE # whether header is fixed when scrolling through -- only for longer tables
) %>%
kableExtra::column_spec(1, bold = TRUE, border_right = TRUE) # column specifications can be easily modified
library(skimr)
storms %>%
skimr::skim() %>%
kableExtra::kable_styling(
bootstrap_options = "striped", # several design options
full_width = FALSE, # defaults to TRUE
position = "center", # where is it positioned?
fixed_thead = TRUE # whether header is fixed when scrolling through -- only for longer tables
) %>%
kableExtra::column_spec(1, bold = TRUE, border_right = TRUE) # column specifications can be easily modified
storms %>%
skimr::skim() %>%
knitr::kable() %>%
kableExtra::kable_styling(
bootstrap_options = "striped", # several design options
full_width = FALSE, # defaults to TRUE
position = "center", # where is it positioned?
fixed_thead = TRUE # whether header is fixed when scrolling through -- only for longer tables
) %>%
kableExtra::column_spec(1, bold = TRUE, border_right = TRUE) # column specifications can be easily modified
library(tidyverse)
library(kableExtra)
knitr::kable(mtcars, digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))  %>%
scroll_box(width = "900px", height = "200px")
saddgaseg
adsg
234 %>%
asdf
nycflights13::weather
example_a <- tibble(
org = c("bank of america","Goldman Sachs Inc", "Steve's Madeup Company"),
some_x_var = c(3, 5, 8),
)
library(dplyr)
library(pbmcapply)
library(stringdist)
library(magrittr)
#inputs: two data frames target_df and new_df.  outputs, dataframe with matches
fuzzyMatch <- function (a, b) {
# calculate a jaccard dissimilarity matrix
distance <- stringdistmatrix(a,b,method = 'jw', p = 0.1, useBytes = T)
# find the closest match for each
match <- apply(distance, 1, which.min)
# find how far away these were
dists <- apply(distance, 1, min)
# return these as a two-column matrix
return (cbind(match = match,
distance = dists))
}
apply_fuzzy_match <- function(df_a, col_in_a, df_b, col_in_b, max.dist){
# df_a = Unmatched_Titles
# col_in_a = "Match_Name"
# df_b = unique_titles_in_raw_coding
# col_in_b = "Match_Name"
# max.dist = 0.2
df_a_var <- c(col_in_a)
df_b_var <- c(col_in_b)
df_a_column <- df_a %>% dplyr::select(dplyr::all_of(df_a_var)) %>% pull()
df_b_column <- df_b %>% dplyr::select(dplyr::all_of(df_b_var)) %>% pull()
#apply matching algorithm
matches <- pbmclapply(X = df_a_column, FUN = function(X, b) fuzzyMatch(X,b), b=df_b_column)
indx <- sapply(matches, length)
match_df <- as.data.frame(do.call(rbind,lapply(matches, `length<-`,max(indx))))
#update the data frame
a_frame <- df_a %>%
dplyr::select(dplyr::all_of(df_a_var))
b_frame <- df_b %>%
dplyr::select(dplyr::all_of(df_b_var)) %>%
slice(match_df[,"match"]) %>%
dplyr::bind_cols(match_df[,"match"]) %>%
rename("Match_Row_In_B" = 2) %>%
dplyr::bind_cols(match_df[,"distance"]) %>%
rename("JW_Distance" = 3)
a_frame %<>%
dplyr::bind_cols(b_frame) %>%
filter(JW_Distance <= max.dist )
names(a_frame) <- c(
c(paste0("A_",col_in_a)), c(paste0("B_",col_in_b)), "Row_Match_From_DF_B", "JW_Distance"
)
return(a_frame)
}
example_a <- tibble(
org = c("bank of america","Goldman Sachs Inc", "Steve's Madeup Company"),
some_x_var = c(3, 5, 8),
)
example_b <- tibble(
org1 = c("Goldman Sachs ","bank of america NA", "Another unrelated company"),
some__other_x_var = c(3, 5, 2),
)
apply_fuzzy_match(df_a = example_a, col_in_a = "org", df_b = example_b, col_in_b = "org1",max.dist = 0.1)
"A" == "a"
"A" = "a"
A
a
rm(A)
??select
?select
