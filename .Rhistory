?? dplyr
library(tidyverse)
library(quanteda)
library(ggforce)
library(grid)
library(gridExtra)
library(kableExtra)
library(DBI)
library(RSQLite)
library(tidylog)
library(magrittr)
'%!in%' <- Negate('%in%')
#enable below before making it live
#library(here)
#master_location <- "Data/master.sqlite"
#disable below before making it live
setwd("/Users/stevenrashin/Dropbox/FINREGRULEMAKE2/")
master_location <- "/Users/stevenrashin/Dropbox/FINREGRULEMAKE2/Data/master.sqlite"
# Load data
con = dbConnect(SQLite(), dbname=master_location)
alltables = dbListTables(con)
alltables
load("Data/Dictionary_Terms.RData")
# Make sure all NA bluebook is NA in comment
All_NA_Comments <- comments %>%
filter(is.na(text)) %>%
select(comment_url) %>%
pull()
con = dbConnect(SQLite(), dbname=master_location)
alltables = dbListTables(con)
alltables
myQuery_mod <- dbSendQuery(con, "SELECT * FROM comments")
comments <- dbFetch(myQuery_mod, n = -1)
comments <- comments %>% tibble()
myQuery <- dbSendQuery(con, "SELECT * FROM attachments")
attachments <- dbFetch(myQuery, n = -1)
attachments <- attachments %>% tibble()
technical_terms_attachments
# make sure no loss
any(technical_terms_attachments$attachment_url %!in% attachments$attachment_url)
any(attachments$attachment_url %!in% technical_terms_attachments$attachment_url)
any(technical_terms_attachments$comment_url %!in% comments$comment_url)
any(comments$comment_url %!in% technical_terms_attachments$comment_url)
technical_terms_attachments$comment_url %!in% comments$comment_url
which(technical_terms_attachments$comment_url %!in% comments$comment_url)
which(comments$comment_url %!in% technical_terms_attachments$comment_url)
technical_terms_attachments$comment_url
##
comments %>%
filter(is.na(text))
comments
##
comments %>%
filter(is.na(comment_text))
##
comments %>%
filter(is.na(comment_text)) %>%
dplyr::select(comment_url)
##
All_NA_Comments <- comments %>%
filter(is.na(comment_text)) %>%
dplyr::select(comment_url) %>%
pull()
c(technical_terms_attachments$comment_url, All_NA_Comments)
c(technical_terms_attachments$comment_url, All_NA_Comments) %!in% comments$comment_url
any(c(technical_terms_attachments$comment_url, All_NA_Comments) %!in% comments$comment_url)
which(c(technical_terms_attachments$comment_url, All_NA_Comments) %!in% comments$comment_url)
which(c(technical_terms_attachments$comment_url) %!in% comments$comment_url)
technical_terms_attachments$comment_url[2]
# Make sure all NA bluebook is NA in comment
All_NA_Comments <- comments %>%
filter(is.na(text)) %>%
select(comment_url) %>%
pull()
# All Non-NA comments have bluebook values
All_Non_NA_Comments <- comments %>%
filter(!is.na(text)) %>%
select(comment_url) %>%
pull()
# All NA in Text lead to NA in bluebook
bluebook_comments %>%
filter(comment_url %in% All_NA_Comments) %>%
skimr::skim()
All_NA_Comments %in% technical_terms_attachments$comment_url
All_NA_Comments
##
All_NA_Comments <- comments %>%
filter(is.na(comment_text)) %>%
dplyr::select(comment_url) %>%
pull()
All_NA_Comments
All_NA_Comments %in% technical_terms_attachments$comment_url
All_NA_Comments %!in% technical_terms_attachments$comment_url
which(All_NA_Comments %!in% technical_terms_attachments$comment_url)
##
All_NA_Comments <- comments %>%
filter(is.na(comment_text)|nchar(comment_text)==0) %>%
dplyr::select(comment_url) %>%
pull()
All_Text_Comments <- comments %>%
filter(nchar(comment_text) > 0) %>%
dplyr::select(comment_url) %>%
pull()
which(technical_terms_comments$comment_url %!in% comments$comment_url)
any(technical_terms_comments$comment_url %!in% comments$comment_url)
any(technical_terms_comments$comment_url %!in% comments$comment_url)
any(comments$comment_url %!in% technical_terms_comments$comment_url)
comments %>%
filter(comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
comments %>%
filter(comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
attachments %>%
filter(comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
attachments %>%
filter(attachment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
comments
comments %>%
filter(comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
attachments
attachments %>%
filter(attachment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540"|
comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540" )
con = dbConnect(SQLite(), dbname=master_location)
alltables = dbListTables(con)
alltables
myQuery_mod <- dbSendQuery(con, "SELECT * FROM comments")
comments <- dbFetch(myQuery_mod, n = -1)
comments <- comments %>% tibble()
myQuery <- dbSendQuery(con, "SELECT * FROM attachments")
attachments <- dbFetch(myQuery, n = -1)
attachments <- attachments %>% tibble()
comments %>%
filter(comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540")
attachments %>%
filter(attachment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540"|
comment_url == "https://www.regulations.gov/comment/CFPB-2016-0025-208540" )
comments %>%
filter(comment_url %in% offending_url )
offending_url = "https://www.ncua.gov/files/comment-letters/2016/cl-exec-20160725HHardison.pdf"
comments %>%
filter(comment_url %in% offending_url )
attachments %>%
filter(attachment_url %in% offending_url | comment_url %in% offending_url)
offending_url = "https://comments.cftc.gov/PublicComments/ViewComment.aspx?id=59220"
comments %>%
filter(comment_url %in% offending_url )
attachments %>%
filter(attachment_url %in% offending_url | comment_url %in% offending_url)
comments %<>%
select(comment_url, comment_text) %>%
rename(text = comment_text) %>%
mutate(comment = 1)
technical_terms_attachments
rm(list=ls())
xaringan::
library(xaringan)
install.packages('xaringan')
dplyr::select??
??dplyr::select
?dplyr::select
mean(c(1,2,4))
3 negage(%in%) c(4, 5, 6)
3 negate(%in%) c(4, 5, 6)
3 %in% c(4, 5, 6)
3 '%in%' c(4, 5, 6)
3 `%in%` c(4, 5, 6)
3 `negate(%in%)` c(4, 5, 6)
# Comments come after pound signs, the computer won't run this code at all
#' To have comments go over many lines, start the first line with a pound sign and then an apostrophe
#' Like this
# These lines install packages that you're probably going to use below
knitr::opts_chunk$set(echo = TRUE, #means that code will show
cache = FALSE,
#cache = TRUE,
warning = FALSE,
message = FALSE,
fig.show="hold",
fig.pos= "htbp",
fig.path = "figs/",
fig.align='center',
fig.cap = '   ',
fig.retina = 1, #6, #FIXME for publication quality images
fig.height = 3,
fig.width = 7,
out.width = "100%",
out.extra = "")
packages <- c("ggplot2", "dplyr","tidyverse","skimr", "haven", "magrittr", "kableExtra")
install.packages(setdiff(packages, rownames(installed.packages())),repos = "http://cran.us.r-project.org")
library(ggplot2)
library(tidyverse)
library(skimr)
library(haven)
library(kableExtra)
`%!in%` <- negate('%in%')
4 %!in% c(3, 4, 5)
4 %in% c(3, 4, 5)
4 %!in% c(3, 4, 5)
4 %!in% c(3, 4, 5)
%!in% <- Negate('%in%')
'%!in%' <- Negate('%in%')
4 %!in% c(3, 4, 5)
3 %!in% c(4, 5, 6)
3 %!in% c(3, 4, "a", 6)
mtcars$mpg
